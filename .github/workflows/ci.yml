name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore backend/CsvImportDemo.csproj
      
    - name: Build
      run: dotnet build backend/CsvImportDemo.csproj --no-restore
      
    - name: Run tests
      run: dotnet test CsvImportDemo.Tests/CsvImportDemo.Tests.csproj --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Check code formatting
      run: dotnet format backend/CsvImportDemo.csproj --verify-no-changes --verbosity diagnostic
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: ./coverage/coverage.cobertura.xml
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Check code formatting
      run: |
        cd frontend
        npm run format:check
        
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        
    - name: Build
      run: |
        cd frontend
        npm run build

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Start backend
      run: |
        cd backend
        dotnet run --no-build &
        sleep 10
        
    - name: Start frontend
      run: |
        cd frontend
        npm start &
        sleep 15
        
    - name: Run smoke tests
      run: |
        # Test GET endpoint
        curl -f http://localhost:5000/api/products || exit 1
        echo "Backend GET endpoint working"
        
        # Test if frontend is accessible
        curl -f http://localhost:3000 || exit 1
        echo "Frontend accessible"
